#Explanation


-The N Queen is the problem of placing N chess queens on an NÃ—N chessboard so that no two queens attack each other. For example, the following is a solution for the 4 Queen problem.





Example

Input -

n = 4;

Output -

True----- Chess Board -----
x Q x x 
x x x Q 
Q x x x 
x x Q x 

package vaibhav;

public class nQueens {
	
	public static boolean isSafe(char board[][], int row, int col) {
		
		//for upward
		for(int i=row-1;i>=0;i--) {
			if(board[i][col] == 'Q') {
				return false;
			}
		}
		
		// for left diagonal
		for(int i=row-1 , j=col-1; i>=0 && j>=0; i--,j--) {
			if(board[i][j] == 'Q') {
				return false;
			}
		}
		
		// for right diagonal
				for(int i=row-1 , j=col+1; i>=0 && j<board.length; i--,j++) {
					if(board[i][j] == 'Q') {
						return false;
					}
				}
				return true;
	}
	
	public static boolean queen(char board[][],int row) {
		
		if(row == board.length) {
			return true;
		}
		
		
		for(int j=0;j<board.length;j++) {
			if(isSafe(board,row,j)) {
				board[row][j] = 'Q';
				if(queen(board,row+1)) {
					return true;
				}
				board[row][j] = 'x';
			}
		}
		return false;
	}
	
	public static void print(char board[][]) {
		System.out.println("----- Chess Board -----");
		for(int i=0;i<board.length;i++) {
			for(int j=0;j<board.length;j++){
				System.out.print(board[i][j]+" ");
			}
			System.out.println();
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int n = 4;
		char board[][] = new char[n][n];
		
		for(int i=0;i<board.length;i++) {
			for(int j=0;j<board.length;j++) {
				board[i][j]= 'x';
			}
		}
		if(queen(board,0)){
			System.out.print("True");
			print(board);
		}
		else {
			System.out.println("False");
		}
	}

}
