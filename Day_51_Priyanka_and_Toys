#Explanation


- Priyanka works for an international toy company that ships by the container. Her task is to determine the lowest cost way to combine her orders for shipping. She has a list of item weights. The shipping company has a requirement that all items loaded in a container must weigh less than or equal to 4 units plus the weight of the minimum-weight item. All items that meet that requirement will be shipped in one container.



What is the smallest number of containers that can be contracted to ship the items based on the given list of weights?





Test cases :



1) if the all item weight is greater than the weight of the minimum weight item + 4.



Example:



Input: 8

    1 2 3 21 7 12 14 21


import java.io.*;
import java.util.*;
import java.util.stream.*;
import static java.util.stream.Collectors.toList;

public class PriyankaandToys {
    public static int toys(List<Integer> w) {
        Collections.sort(w);
        int count = 1;
        int s = w.get(0);
        for (int a : w) {
            if (a > (s + 4)) {
                count++;
                s = a;
            }
        }
        return count;
    }
}

class PriyankaandToys_exe {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> w = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                .map(Integer::parseInt)
                .collect(toList());

        int result = PriyankaandToys.toys(w);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
