#Explanation



- Inversion count in Array using Merge Sort


Explanation:

Inversion Count for an array indicates â€“ how far (or close) the array is from being sorted. If the array is already sorted, then the inversion count is 0, 
but if the array is sorted in reverse order, the inversion count is the maximum. 

Given an array a[]. The task is to find the inversion count of a[]. Where two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.




Test Case -
If the array is sorted

Example

Input : arr[] = {8, 4, 2, 1}


Output :  6


#Explanation END


package vaibhav;

public class Inversion {
	
	public static void print(int arr[]) {
		for(int i=0; i<arr.length;i++) {
			System.out.println(arr[i]);
		}
	}
	
public static int partition(int arr[], int si, int mid, int ei) {
		
		int temp[] =new int[ei-si+1];
		int i = si;
		int j = mid;
		int k =0;
		int count =0;
		while(i <= mid && j <= ei) {
			
			if(arr[i] <= arr[j]) {
				temp[k] = arr[i];
				k++;
				i++;
				
			}
			else {
				temp[k] = arr[j];
				count += (mid-i);
				k++;
				j++;
				
			}	
			
		}
		
		while(i < mid) {
			temp[k] = arr[i];
			k++;
			i++;
			
		}
		
		while(j <= ei) {
			temp[k] = arr[j];
			k++;
			j++;
		}
		
//		for(i=si, k=0; i<=ei; i++, k++) {
//			arr[i] = arr[k];
//		}
		
		return count;
	}
	
	public static int inverse(int arr[], int si, int ei) {
		
		int count =0;
		
		if(si > ei) {
			
			int mid = (si+ei)/2;
			
			count += inverse(arr,si,mid);
			count += inverse(arr,mid+1,ei);
			
			count += partition(arr,si,mid+1,ei);
		}
		
		return count;
	} 
	
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int arr[] = { 1, 20, 6, 4, 5 };
		System.out.println(inverse(arr,0,arr.length-1));
	}

}
