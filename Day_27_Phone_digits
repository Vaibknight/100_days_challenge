#Explanation



- Print all possible words from phone digits


Explanation:

It can be observed that each digit can represent 3 to 4 different alphabets (apart from 0 and 1). So the idea is to form a recursive function. 
Then map the number with its string of probable alphabets, i.e 2 with “abc”, 3 with “def” etc. Now the recursive function will try all the alphabets,
mapped to the current digit in alphabetic order, and again call the recursive function for the next digit and will pass on the current output string.


Test Case -
Press n number times

Example

str = "22"

Output -

dd
de
df
ed
ee
ef
fd
fe
ff


#Explanation END


package vaibhav;

public class Recursive_keypad {
	
	public static String keypad [] = {".","abc", "def", "ghi", "jkl", "mno", "pqrs", "tu", "vwx", "yz"};
	
	public static void key(String str , int idx, String combination) {
		
		if(idx == str.length()) {
			System.out.println(combination);
			return;
		}
		
		char currChar = str.charAt(idx);
		
		String Mapping = keypad[currChar - '0'];
		
		for(int i=0; i<Mapping.length(); i++) {
			key(str,idx+1,combination+Mapping.charAt(i));
		}
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String str = "22";
		key(str,0,"");
	}

}
