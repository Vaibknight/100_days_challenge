#Explanation


- Largest Rectangular Area in a Histogram using Stack

Example

Input - 

 arr[] = {2,1,5,6,2,3}

Output -

10

package vaibhav;
import java.util.*;

public class Stack_Histogram {

	public static void largest(int arr[]) {
		
		int maxarr = 0;
		int nsr[] = new int[arr.length];
		int nsl[] = new int[arr.length];
		
		// Next smallest right
		
		Stack<Integer> s = new Stack<>();
		
		for(int i=arr.length-1; i>=0;i--) {
			
			while(!s.isEmpty() && arr[s.peek()] >= arr[i]) {
				
				s.pop();
			}
			
			if(s.isEmpty()) {
				nsr[i] = arr.length;
			}
			else {
				nsr[i] = s.peek();
			}
			s.push(i);
		}
		
		// Next smallest left
				
				for(int i=0; i<=arr.length-1;i++) {
					
					while(!s.isEmpty() && arr[s.peek()] >= arr[i]) {
						
						s.pop();
					}
					
					if(s.isEmpty()) {
						nsl[i] = -1;
					}
					else {
						nsl[i] = s.peek();
					}
					s.push(i);
				}
				
				// Find Current index
				
				for(int i=0;i<=arr.length-1;i++) {
					
					int height = arr[i];
					int width = nsr[i] - nsl[i] - 1;
					
					
					
					
					int currArea = height * width;
					
					maxarr = Math.max(maxarr, currArea);
				}
				System.out.println(maxarr);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int arr[] = {2,1,5,6,2,3};
		largest(arr);
	}

}
