#Explanation


- Delete N nodes after M nodes of a linked list


Example

Input - 

3 2 0 -4 -1

int N = 1, M =1


Output -

3 0 -1

package vaibhav;
import java.util.*;

public class LL_MN {
	
	public class Node{
		int data;
		Node next;
		
		Node(int data){
			this.data=data;
			this.next = null;
		}
	}
	
	public static Node head;
	public static Node tail;
	
	public void addFirst(int data) {
		
		Node newNode = new Node(data);
		
		if(head== null) {
			head = tail = newNode;
			return;
		}
		
		newNode.next = head;
		head = newNode;
	}
	
	public void print() {
		
		if(head == null) {
			System.out.println("LL is empty");
			return;
		}
		
		Node temp = head;
		
		while(temp!=null) {
			System.out.print(temp.data+"->");
			temp = temp.next;
		}
		System.out.println();
	}
	
	public void mn(Node head, int M, int N) {
		
		Node curr = head,t;
		
		while(curr != null) {
			for(int count=1;count<M && curr!=null; count++) {
				curr = curr.next;
			}
				if(curr == null) {
					return;
				}
				
				t=curr.next;
				for(int count=1; count<=N && t!=null;count++) {
					Node temp = t;
					t = t.next;
				}
			curr.next = t;
			curr = t;
			
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		LL_MN ll = new LL_MN();
		
		int M =2;
		int N = 2;
		
		ll.addFirst(8);
		ll.addFirst(7);
		ll.addFirst(6);
		ll.addFirst(5);
		ll.addFirst(4);
		ll.addFirst(3);
		ll.addFirst(2);
		ll.addFirst(1);
		
		ll.print();
		ll.mn(head, M, N);
		ll.print();
	}

}
