#Explanation


- Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.


Example

Input -

intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5],


Output -

Intersected at '8'

package vaibhav;
import java.util.*;


public class LL_intersetion {
	
	static class Node{
		int data;
		Node next;
		
		Node(int data){
			this.data = data;
			this.next = null;
		}
	}
	
	public Node intersect(Node head1, Node head2) {
		
		while(head2!=null) {
			Node temp = head1;
			while(temp!=null) {
				if(temp==head2) {
					return head2;
				}
				temp=temp.next;
			}
			head2 = head2.next;
		}
		return null;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		LL_intersetion list = new LL_intersetion();
		
		Node head1, head2;
		head1 = new Node(10);
		head2 = new Node(3);
		
		Node newNode = new Node(6);
		head2.next = newNode;
		
		newNode = new Node(9);
		head2.next.next = newNode;
		
		newNode = new Node(15);
		head2.next.next.next = newNode;
		head1.next = newNode;
		
		newNode = new Node(30);
		head1.next.next = newNode;
		
		head1.next.next.next = null;
		
		Node newList = list.intersect(head1,head2);
		
		if(newList == null) {
			System.out.println("No intersection");
		}
		else {
			System.out.println("Intersection : "+newList.data);
		}
		
	}

}
