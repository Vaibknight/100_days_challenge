#Explanation


- Merge Sort for Linked Lists


Example

Input -

4->3->2->1->


Output -

1->2->3->4->

package vaibhav;

public class LL_palindrome {
	
	public static class Node{
		int data;
		Node next;
		
		public Node(int data) {
			this.data = data;
			this.next = null;
		}
		
	}
		public static Node head;
		public static Node tail;
		
		public void addFirst(int data) {
			Node newNode = new Node(data);
			
			if(head == null) {
				head = tail = newNode;
				return;
			}
			
			newNode.next = head;
			head = newNode;
		}
		
		public void addLast(int data) {
			Node newNode = new Node(data);
			
			if(head == null) {
				head = tail = newNode;
				return;
			}
			
			tail.next = newNode;
			tail = newNode;
		}
		
		public void print() {
			
			if(head == null ) {
				System.out.println("LL is empty");
				return;
			}
			Node temp = head;
			
			while(temp != null) {
				System.out.print(temp.data+"->");
				temp = temp.next;
			}
			System.out.println();
		}
		
		public Node findmid(Node head) {
			
			Node slow = head;
			Node fast = head;
			
			while(fast != null && fast.next != null) {
				slow = slow.next; // +1
				fast = fast.next.next; // +2
			}
			return slow; // return mid point
		}
		
		public boolean palin() {
			
			// step 1 - midpoint
			if(head == null || head.next == null) {
				return true;
			}
			
			Node midpoint = findmid(head);
			
			// step 2 - reverse right
			
			
			Node prev = null;
			Node curr = midpoint;
			Node next;
			while(curr != null) {
				next = curr.next;
				curr.next = prev;
				prev = curr;
				curr = next;
			}
			
			// step 3 - comapre right and left
			Node right = prev;
			Node left = head;
			
			while(right != null) {
				if(left.data!= right.data) {
					return false;
				}
				left = left.next;
				right = right.next;
			}
			return true;
		}
		
		
		public Node merge(Node head1, Node head2) {
			
			Node mergell = new Node(-1);
			Node temp = mergell;
			
			while(head1 != null && head2 != null) {
				if(head1.data < head2.data) {
					temp.next = head1;
					head1 = head1.next;
					temp = temp.next;
				}else {
					temp.next = head2;
					head2 = head2.next;
					temp = temp.next;
				}
			}
			
			while(head1 != null) {
				temp.next = head1;
				head1 = head1.next;
				temp = temp.next;
			}
			while(head2 != null) {
				temp.next = head2;
				head2 = head2.next;
				temp = temp.next;
			}
			
			return mergell.next;
		}
		
		
		public Node getmid(Node head) {
			
			Node slow = head;
			Node fast = head.next;
			while(fast!= null && fast.next != null) {
				slow = slow.next;
				fast = fast.next;
			}
			
			return slow;
		}
		
		public Node mergeSort(Node head) {
			
			if(head ==null || head.next == null) {
				return head;
			}
			
			Node mid = getmid(head);
			
			Node rightHead = mid.next;
			mid.next = null;
			
			Node newleft = mergeSort(head);
			Node newRight = mergeSort(rightHead);
			
			return merge(newleft,newRight);
		}
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		LL_palindrome l = new LL_palindrome();
		
		l.addLast(4);
		l.addLast(3);
		l.addLast(2);
		l.addLast(1);
		l.print();
		
		l.head = l.mergeSort(l.head);
		l.print();
	}

}
