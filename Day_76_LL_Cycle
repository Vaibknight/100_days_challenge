#Explanation


- Given a linked list, check if the linked list has a loop or not. The below diagram shows a linked list with a loop. 


Example

Input -

head = new Node(1);
		Node temp = new Node(2);
		head.next = temp;
		head.next.next = new Node(3);
		head.next.next.next = temp;


Output -

true

package vaibhav;


public class LL_cycle {

	public static class Node{
		int data;
		Node next;
		
		public Node(int data) {
			this.data = data;
			this.next = null;
		}
		
	}
		public static Node head;
		public static Node tail;
		
		public void addFirst(int data) {
			Node newNode = new Node(data);
			
			if(head == null) {
				head = tail = newNode;
				return;
			}
			
			newNode.next = head;
			head = newNode;
		}
		
		public void addLast(int data) {
			Node newNode = new Node(data);
			
			if(head == null) {
				head = tail = newNode;
				return;
			}
			
			tail.next = newNode;
			tail = newNode;
		}
		
		public void print() {
			
			if(head == null ) {
				System.out.println("LL is empty");
				return;
			}
			Node temp = head;
			
			while(temp != null) {
				System.out.print(temp.data+"->");
				temp = temp.next;
			}
			System.out.println();
		}
		
		public static boolean cycle() {
			
			Node slow = head;
			Node fast = head;
			while(fast != null && fast.next != null) {
				slow = slow.next;
				fast = fast.next.next;
				if(slow == fast) {
					return true;
				}
			}
			return false;
		}
		
		public static void removeCycle() {
			
			Node slow = head;
			Node fast = head;
			
			boolean cyc = false;
			
			while(fast!= null && fast.next!= null) {
				
				slow = slow.next;
				fast = fast.next.next;
				
				if(slow == fast) {
					cyc = true;
					break;
				}
			}
			
			if(cyc == false) {
				return;
			}
			
			slow = head;
			Node prev = null;
			while(slow!=fast) {
				prev = fast;
				slow = slow.next;
				fast = fast.next;
			}
			
			prev.next = null;
		}
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		head = new Node(1);
		Node temp = new Node(2);
		head.next = temp;
		head.next.next = new Node(3);
		head.next.next.next = temp;
		
		System.out.println(cycle());
	}

}
